'''________________________Main program_____________________________________'''

#Bibliotheken
import pandas as pd
from datetime import datetime as dt
import math
import numpy as np
from matplotlib import pyplot as plt
from matplotlib import cm
from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()
from Area import calculation
from Battery import battery

'''_________________Input from user_______________________''' 
#Location data
breitengrad = 37.4#float(input('Please insert the latitude. [°]'))         
längengrad = -6.0#float(input('Please insert the longitude. [°]'))
jahre = 11#int(input('How many years should be taken into account? (Max. 11 years)'))

#Battery data
N_c=13#int(input('Please insert the number of charges needed in 24h.'))  #e.g. 13 charges
N_g=1000#int(input('Please insert the grid availability.[kVA]'))        #e.g.  1000kVA
N_t=336#float(input('Please insert the energy consumption per truck.[kWh]'))   #e.g. 336


#PV data
eta=0.223#float(input('Please insert the efficiency of the PV modules [-].'))
A_m=1.98#float(input('Please insert the area of one PV module [m^2].'))

'''__________________________Average of simulation data______________________'''

Gs=np.zeros(8800)
H_suns=np.zeros(8800)
T2ms=np.zeros(8800)

for i in range(0,jahre):
    
   df=pd.read_csv('https://re.jrc.ec.europa.eu/api/v5_2/seriescalc?lat='+str(breitengrad)+'&lon='+str(längengrad)+'&startyear='+str(2016-i)+'&endyear='+str(2016-i)+'&outputformat=csv',sep=',',header=6)
   df = df.dropna()
   df.time = df.apply(lambda row: dt.strptime(row.time,'%Y%m%d:%H%M'), axis=1)
   Gi=df['G(i)'].astype(np.float64).to_numpy()
    
   for n in range (0,len(df.time)):
      Gs[n] += Gi [n]
      H_suns[n] += df.H_sun[n]
      T2ms [n] += df.T2m[n]
    
G= Gs/jahre
H_sun= H_suns/jahre
T2m = T2ms/ jahre +273.15

'''_________________Calculations in classes_______________________'''            
#Battery scenario
B=battery(N_c,N_g,N_t)

result_bat=B.Bat()

E=result_bat[0]               #total energy needed from BESS to charge trucks [kWh]
C=round(result_bat[1],0)               #needed energy storage capacity [kWh]
N_u=result_bat[2]             #number of battery units
N_a=result_bat[3]             #total surface area [m^2]

#Scenario 1
scene1=calculation(breitengrad,längengrad,G,df.time,H_sun,T2m,E,eta,N_g)


result1=scene1.PV()


'''_________________Grafic output________________________'''


fig = plt.figure(100)
fig.suptitle('Results of simulation from '+ str(2016-jahre) +' to '+ str(2016) + ' at '+ str(breitengrad) + ' , '+ str(längengrad))
props = dict(boxstyle = 'square', facecolor = 'white', alpha = 0.5)

ax1 = fig.add_subplot(1, 2, 1, projection='3d')
ax2 = fig.add_subplot(1, 2, 2)
Z=np.array(result1[0]/1000)

y=np.array(result1[1])
x=np.array(result1[2])
_x,_y = np.meshgrid(x,y)
X,Y = _x.ravel(), _y.ravel()

minA= np.amin(Z)*1000
top=Z.ravel()
minM= round(minA/A_m,0)
width = depth = 10

cmap = cm.get_cmap('jet')
max_height = np.max(top)  
min_height = np.min(top)
rgba = [cmap((k-min_height)/max_height) for k in top]

ax1.bar3d(X-width/2., Y-width/2., 0, width, depth, top, color= rgba)

ax1.set_yticks([0,15,30,45,60,75,90])
ax1.set_xticks([90,45,15,0,-15,-45,-90])

ax1.set_ylabel('Modul tilt [°]')
ax1.set_xlabel('Modul orientation [°] West-South-East')
ax1.set_zlabel('Modul area [*10$^3$ m$^2$]')

tilt=result1[3]
orientation=result1[4]

textstr1 = f'Min. PV area: {minA} m$^2$\nat tilt: {tilt} °\norientation: {orientation} °\nnumber of modules: {minM}\nenergy storage capacity: {C} kWh\nnumber of battery units: {N_u}\nsurface area of battery: {N_a} m$^2$'
ax2.axis('off')
ax2.text(0,0.6, textstr1 , fontsize = 10, bbox=props)



n=list(range(0,result1[6],1))
m=[i / 1000 for i in result1[5]]
o=[l/1000 for l in result1[7]]
Bat=[E]*result1[6]

fig=plt.figure(300)
ax=fig.add_subplot(1,1,1)
ax.bar(n,m,label='PV output', bottom=o)
ax.bar(n,o, label='Grid output')
ax.plot(n,Bat,label='Required energy', color='r')
ax.set_xticks([1,30,59,90,120,151,181,212,243,273,304,334,365])
ax.set_xlabel('Day of the year')
ax.set_ylabel('Energy [kWh]')
ax.set_title('Timeline of energy consumption in a year at best PV position')
ax.legend()
plt.show()


