'''________________________Main program_____________________________________'''

#Bibliotheken
import pandas as pd
from datetime import datetime as dt
import math
import numpy as np
from matplotlib import pyplot as plt
from matplotlib import cm
from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()
import sys
from Area import calculation
from Battery import battery
from Wind import wind
from Combo import combo

'''___________________________Input from user_______________________________________''' 
#Location data
breitengrad = 48.8#float(input('Please insert the latitude. [°]'))         
längengrad = 9.2#float(input('Please insert the longitude. [°]'))
jahre = 11#int(input('How many years should be taken into account? (Max. 11 years)'))

#Battery data
N_c=13#int(input('Please insert the number of charges needed in 24h.'))                              #e.g. 13 charges
N_k=0#int(input('How much power can be taken from the grid constantly to charge the trucks? [kWh]')) #e.g. 1000kWh or 0kWh
N_g=1000#int(input('Please insert the grid availability in 1h without constant power.[kVA]'))        #e.g. 1000kVA
N_t=336#float(input('Please insert the energy consumption per truck.[kWh]'))                         #e.g. 336kWh


#PV data
eta=0.223#float(input('Please insert the efficiency of the PV modules [-].'))
A_m=1.98#float(input('Please insert the area of one PV module [m^2].'))


#Wind data
WT=4#int(input('Do you want to include windturbines? (no: 0; VAWT 3kW: 1; HAWT 7,5kW: 2; HAWT 10kW: 3; HAWT 3,3MW)'))
R=1#int(input('Do you want to combine PV modules and windturbines? [no: 0; yes: 1]'))
A=200#int(input('What is the maximum number of wind turbines to be installed? [-]'))



'''__________________________Average of simulation data_____________________________'''
#Data is downloaded from PVGIS for given number of years. Then an average meteorological year is calculated.

Gs=np.zeros(8800)
H_suns=np.zeros(8800)
T2ms=np.zeros(8800)
Ws = np.zeros(8800)

for i in range(0,jahre):
    
   df=pd.read_csv('https://re.jrc.ec.europa.eu/api/v5_2/seriescalc?lat='+str(breitengrad)+'&lon='+str(längengrad)+'&startyear='+str(2016-i)+'&endyear='+str(2016-i)+'&outputformat=csv',sep=',',header=6)
   df = df.dropna()
   df.time = df.apply(lambda row: dt.strptime(row.time,'%Y%m%d:%H%M'), axis=1)
   Gi=df['G(i)'].astype(np.float64).to_numpy()
    
   for n in range (0,len(df.time)):
      Gs[n] += Gi [n]
      H_suns[n] += df.H_sun[n]
      T2ms [n] += df.T2m[n]
      Ws[n]+= df.WS10m[n]
    
G= Gs/jahre
H_sun= H_suns/jahre
T2m = T2ms/ jahre +273.15
W = Ws/jahre


'''___________________________Calculations in classes______________________________'''            
#Battery scenario
B=battery(N_c,N_g,N_t,N_k)

result_bat=B.Bat()

E=result_bat[0]               #total energy needed from BESS to charge trucks [kWh]
C=round(result_bat[1],0)      #needed energy storage capacity [kWh]
N_u=result_bat[2]             #number of battery units
N_a=result_bat[3]             #total surface area [m^2]

if N_g>= E:
   
   sys.exit('No PV, VAWT and battery system is needed. The trucks can be charged from the grid entiredly.')


#PV scenario
scene1=calculation(breitengrad,längengrad,G,df.time,H_sun,T2m,E,eta,N_g) #calling class Area
result1=scene1.PV()           
tilt=result1[3]               #Output of best tilt of the PV panels at given location.
orientation=result1[4]        #Output of best orientation of the PV panels at given location.


#wind scenario
if WT==1:

   H=8         #height of the wind turbine hub [m]
   Pc=[0,0,50,100,150,250,400,600,900,1300,1750,2400,3050,3500,3750,3900,3950,4000,4000,4000,4000,4000,4000,4000,4000,4000] # Data from https://www.vertikalewindkraftanlage.de/Vertikales-Windrad/Vertikales-Windrad-GVG-3KW.html
   scene2=wind(E,N_g,W,WT,df.time,Pc,H) #calling class Wind
   result2=scene2.Wind()

elif WT==2:

   H=9.2       #height of the wind turbine hub [m]
   Pc=[0,0,100,200,500,900,1400,2200,3500,5000,6500,7500,8500,8500,8500,8500,0,0,0,0,0,0,0,0,0,0]  #Data from https://www.braun-windturbinen.com/produkte/antaris-kleinwindanlagen/antaris-7-5-kw/
   scene2=wind(E,N_g,W,WT,df.time,Pc,H) #calling class Wind
   result2=scene2.Wind()

elif WT==3:

   H=12.5      #height of the wind turbine hub [m]
   Pc=[0,0,50,100,500,1400,2500,3800,5300,6900,8400,9900,10200,10100,10000,10000,0,0,0,0,0,0,0,0,0,0] #Data from https://www.psw-energiesysteme.com
   scene2=wind(E,N_g,W,WT,df.time,Pc,H) #calling class Wind
   result2=scene2.Wind()

elif WT==4:

   H=119       #height of the wind turbine hub [m]
   Pc=[0,0,0,22000,134000,302000,552000,906000,1370000,1950000,2586000,3071000,3266000,3298000,3300000,3300000,3300000,3300000,3300000,3300000,3300000,3300000,3300000,3300000,3300000,3300000] #Data from https://www.wind-turbine-models.com/turbines/693-vestas-v112-3.3
   scene2=wind(E,N_g,W,WT,df.time,Pc,H) #calling class Wind
   result2=scene2.Wind()

if R==1:
   scene3=combo(breitengrad,längengrad,G,df.time,H_sun,T2m,E,eta,N_g,W,WT,Pc,H,A, tilt, orientation)  #calling class Combo
   result3=scene3.Combo()



'''_____________________________________Grafic output____________________________________'''
#Output generation 

'''_________________Output PV area_______________________'''
fig = plt.figure(100)
fig.suptitle('Results of simulation from '+ str(2016-jahre) +' to '+ str(2016) + ' at '+ str(breitengrad) + ' , '+ str(längengrad))
props = dict(boxstyle = 'square', facecolor = 'white', alpha = 0.5)

ax1 = fig.add_subplot(1, 2, 1, projection='3d')
ax2 = fig.add_subplot(1, 2, 2)
Z=np.array(result1[0]/1000)

y=np.array(result1[1])
x=np.array(result1[2])
_x,_y = np.meshgrid(x,y)
X,Y = _x.ravel(), _y.ravel()

minA= np.amin(Z)*1000
top=Z.ravel()
minM= round(minA/A_m,0)
width = depth = 10

cmap = cm.get_cmap('jet')
max_height = np.max(top)  
min_height = np.min(top)
rgba = [cmap((k-min_height)/max_height) for k in top]

ax1.bar3d(X-width/2., Y-width/2., 0, width, depth, top, color= rgba)

ax1.set_yticks([0,15,30,45,60,75,90])
ax1.set_xticks([90,45,15,0,-15,-45,-90])

ax1.set_ylabel('Modul tilt [°]')
ax1.set_xlabel('Modul orientation [°] West-South-East')
ax1.set_zlabel('Modul area [*10$^3$ m$^2$]')

textstr1 = f'Min. PV area: {minA} m$^2$\nat tilt: {tilt} °\norientation: {orientation} °\nNumber of modules: {minM}\nEnergy storage capacity: {C} kWh\nNumber of battery units: {N_u}\nSurface area of battery: {N_a} m$^2$'
ax2.axis('off')
ax2.text(0,0.6, textstr1 , fontsize = 10, bbox=props)

'''______________Output energy PV______________'''

n=list(range(0,result1[6],1))
m=[i / 1000 for i in result1[5]]
o=[(l/1000)-N_k for l in result1[7]]
Bat=[E]*result1[6]
P_grid=round(-result1[8]/1000,0)
P_tot=round(result1[9]/1000,0)
Pmin1=min(o)

fig=plt.figure(300)
ax=fig.add_subplot(1,1,1)
ax.bar(n,m,label='PV output') 
ax.bar(n,o, label='Grid output')
ax.plot(n,Bat,label='Required energy', color='r')
ax.set_xticks([1,30,59,90,120,151,181,212,243,273,304,334,365])
ax.set_xlabel('Day of the year')
ax.set_ylabel('Energy [kWh]')
ax.set_title('Timeline of energy harvest in a year at best PV position')
ax.legend()
ax.text(181, Pmin1, 'Total grid output: '+str(P_grid)+' kWh\nTotal grid feed: '+str(P_tot)+' kWh', size=10,
         ha="center", va="center",
         bbox=dict(boxstyle="round",
                   ec=(0.6, 0.4, 0.4),
                   fc=(0.6, 0.8, 0.8),
                   )
         )



if WT>0:
   '''____________Output energy wind____________'''

   r=[i / 1000 for i in result2[1]]
   s=[(l/1000)-N_k for l in result2[2]]
   Bat=[E]*result1[6]  
   P_w_tot1=round(result2[4]/1000,0)
   P_w_grid1=round(-result2[5]/1000,0)
   Pmin2=min(s)


   fig=plt.figure(400)
   ax=fig.add_subplot(1,1,1)
   ax.bar(n,r,label='Wind turbine output') 
   ax.bar(n,s, label='Grid output')
   ax.plot(n,Bat,label='Required energy', color='r')
   ax.set_xticks([1,30,59,90,120,151,181,212,243,273,304,334,365])
   ax.set_xlabel('Day of the year')
   ax.set_ylabel('Energy [kWh]')
   ax.text(181, Pmin2, 'Total grid output: '+str(P_w_grid1)+' kWh\nTotal grid feed: '+str(P_w_tot1)+' kWh', size=10,
         ha="center", va="center",
         bbox=dict(boxstyle="round",
                   ec=(0.6, 0.4, 0.4),
                   fc=(0.6, 0.8, 0.8),
                   )
         )


   if result2[3]==1:
      ax.set_title('Timeline of energy harvest in a year by ' +str(result2[0])+' wind turbines (Program stopped at 10000 wind turbines.)')
   else:
      ax.set_title('Timeline of energy harvest in a year by ' +str(result2[0])+' wind turbines')
   ax.legend()

if R==1:
   
   M=result3[0]

   if M ==1:

      '''____________Output combo of PV and wind technology_________________'''

      n3=list(range(0,result3[2],1))
      m3=[i / 1000 for i in result3[1]]
      o3=[(i/1000)-N_k for i in result3[3]]
      r3=[i / 1000 for i in result3[6]]
      Bat3=[E]*result3[2]
      P_grid3=round(-result3[4]/1000,0)
      P_tot3=round(result3[5]/1000,0)
      minA3 = result3[8]
      minM3 = round(minA3/A_m,0)
      Pmin3= min(o3)

      fig=plt.figure(500)
      ax = fig.add_subplot(1, 1, 1)
      ax.bar(n3,m3,label='PV output') 
      ax.bar(n3,o3, label='Grid output')
      ax.bar(n3,r3,label='Wind turbine output')
      ax.plot(n,Bat3,label='Required energy', color='r')
      ax.set_xticks([1,30,59,90,120,151,181,212,243,273,304,334,365])
      ax.set_xlabel('Day of the year')
      ax.set_ylabel('Energy [kWh]')
      ax.set_title('Timeline of energy harvest with '+str(minM3)+' PV modules and '+str(result3[7])+' wind turbines.')
      ax.legend()
      ax.text(181, Pmin3, 'Total grid output: '+str(P_grid3)+' kWh\nTotal grid feed: '+str(P_tot3)+' kWh', size=10,
            ha="center", va="center",
            bbox=dict(boxstyle="round",
                     ec=(0.6, 0.4, 0.4),
                     fc=(0.6, 0.8, 0.8),
                     )
            )

   else:
      print('It is sufficient to use '+str(A)+' wind turbines.')


plt.show()



